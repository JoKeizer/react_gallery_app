{"version":3,"sources":["components/Nav.js","components/Photo.js","components/NotFound.js","components/Gallary.js","components/SearchForm.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","exact","to","Component","Photo","props","data","id","secret","server","farm","NotFound","Gallery","photos","results","length","map","photo","key","title","SearchForm","state","searchtext","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","onSearch","query","path","history","push","currentTarget","reset","onSubmit","this","ref","input","type","name","placeholder","required","fill","height","viewBox","width","xmlns","d","withRouter","apiKey","App","performSearch","axios","get","then","response","loading","catch","error","console","log","home","friends","people","sunset","render","Gallary","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c057fa0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <nav className=\"main-nav\">\n            <ul>\n              <li><NavLink exact to ='/' >Home</NavLink></li>\n              <li><NavLink to='/friends'>Friends</NavLink></li>\n              <li><NavLink to='/people'>People</NavLink></li>\n              <li><NavLink to='/sunset'>Sunset</NavLink></li>\n            </ul>\n          </nav>\n        )\n    }\n}","import React from 'react';\n\n//Here we take all data from the API\nconst Photo = props => {\n  const id = props.data.id;\n  const secret = props.data.secret;\n  const server = props.data.server;\n  const farm = props.data.farm;\n\n  return (\n  //With template literals we pass the date to the src\n  <li>\n      <img src={`https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`} alt=\"\" />\n  </li>\n\n  );\n}\n\nexport default Photo;","import React from 'react';\n\nconst NotFound = props => (\n  <li className='photo-container not-found'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no photos match your search</h3>\n  </li>\n);\n\nexport default NotFound;","\nimport React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\n//props are all the images from the API with map we take one image and in Photo component we take the id, secret, server and farm to get one Image\n\nconst Gallery = (props)=>{\n    const results = props.data;\n    let photos;\n    if(results.length> 0)\n    {photos = results.map(photo =><Photo data={photo} key={photo.id}/>);\n        return(\n            <div className=\"photo-container\">\n                <h2>{props.title} images</h2>\n                    <ul>{photos}</ul>\n            </div>\n        );}else{ \n            photos = <NotFound/>;\n            return(\n                <div className=\"photo-container\">\n                    <ul>{photos}</ul>\n                </div>\n            );\n        }\n};\n\nexport default Gallery;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nclass SearchForm extends Component {\n    state = {\n        searchtext: ''\n    }\n\n    onSearchChange = (e) => {\n        this.setState({searchtext: e.target.value})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.onSearch(this.query.value);\n        //we can use history to create a new path\n        let path = `/search/${this.query.value}`;\n        this.props.history.push(path);\n        e.currentTarget.reset();\n    }\n\n    render() {\n\n        return (\n            <form onSubmit={this.handleSubmit} className=\"search-form\">\n            <input ref={(input) => this.query = input} type=\"search\" name=\"search\" placeholder=\"Search\" required/>\n            <button type=\"submit\" className=\"search-button\">\n              <svg fill=\"#1d1b1b\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n              </svg>\n            </button>\n          </form>\n        )\n      \n    }\n}\n\nexport default withRouter(SearchForm);","const apiKey = '8092185dff33df09943635e786214042';\nexport default apiKey;\n\n","import React, { Component } from 'react';\nimport {HashRouter,  Route, Switch } from 'react-router-dom';\nimport Nav from './components/Nav'\nimport Gallary from './components/Gallary'\nimport SearchForm from './components/SearchForm'\nimport NotFound from './components/NotFound'\nimport apiKey from './config';\nimport axios from 'axios'\nimport './App.css';\n\nexport default class App extends Component {\n  //State content that will update the DOM\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      query: '',\n      loading: true,\n      home: {\n        photos: [],\n        loading: true,\n      },\n      friends: {\n        photos: [],\n        loading: true,\n      },\n      people: {\n        photos: [],\n        loading: true,\n      },\n      sunset: {\n        photos: [],\n        loading: true,\n      }\n    };  \n  };\n\n  //ComponentDidMount will always run with axios we will get the date from Flickr API\n  componentDidMount() {\n    this.performSearch();\n\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=vacation&per_page=24&format=json&nojsoncallback=1&safe_search=1&safe_search=1`)\n    .then(response => {\n            let home ={...this.state.home};\n              home.photos = response.data.photos.photo;\n              home.loading= false;\n              this.setState({home});\n        })\n\n        axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=friends&per_page=24&format=json&nojsoncallback=1&safe_search=1&safe_search=1`)\n        .then(response => {\n                let friends ={...this.state.friends};\n                  friends.photos = response.data.photos.photo;\n                  friends.loading= false;\n                  this.setState({friends});\n            })\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=people&per_page=24&format=json&nojsoncallback=1&safe_search=1&safe_search=1`)\n          .then(response => {\n                let people ={...this.state.people};\n                people.photos = response.data.photos.photo;\n                people.loading= false;\n                      this.setState({people});\n                })\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=sunset&per_page=24&format=json&nojsoncallback=1&safe_search=1&safe_search=1`)\n          .then(response => {\n                 let sunset ={...this.state.sunset};\n                 sunset.photos = response.data.photos.photo;\n                 sunset.loading= false;\n                      this.setState({sunset});\n                    })\n    .catch(error => {\n        console.log('Error fetching data')\n    })\n  }\n\n  performSearch = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&safe_search=1&safe_search=1`)\n    .then(response => {\n        this.setState({\n            photos: response.data.photos.photo,\n            loading: false,\n            title: query\n        })\n      })\n\n    .catch(error => {\n        console.log('Error fetching data')\n    })\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"container\">\n          <SearchForm \n            onSearch={this.performSearch}\n          />\n          <Nav/>\n          <Switch>\n            <Route exact path='/' render={ () => <Gallary data={this.state.home.photos} title={'vacation'} />} ></Route>\n            <Route exact path='/friends' render={ () => <Gallary data={this.state.friends.photos} title={'friends'} />} ></Route>\n            <Route exact path='/people' render={ () => <Gallary data={this.state.people.photos} title={\"people\"} />} ></Route>\n            <Route exact path='/sunset' render={ () => <Gallary data={this.state.sunset.photos} title={\"sunset\"} />} ></Route>\n            <Route exact path='/search/:query' render={ () => <Gallary data={this.state.photos} title={this.state.title} />} ></Route>\n            <Route component = {NotFound}/>                                               \n          </Switch>\n          </div>\n      </HashRouter>      \n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}